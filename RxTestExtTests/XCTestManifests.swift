#if !canImport(ObjectiveC)
import XCTest

extension CompleteAssertionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CompleteAssertionTests = [
        ("testComplete", testComplete),
        ("testNotComplete", testNotComplete),
    ]
}

extension ErrorAssertionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ErrorAssertionTests = [
        ("testErrorEvent", testErrorEvent),
        ("testNotErrorEvent", testNotErrorEvent),
    ]
}

extension EvaluationNegatedTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EvaluationNegatedTests = [
        ("test_failure_customMessage", test_failure_customMessage),
        ("test_failure_formatsMessage", test_failure_formatsMessage),
        ("test_success_notFail", test_success_notFail),
    ]
}

extension EvaluationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EvaluationTests = [
        ("test_failure_customMessage", test_failure_customMessage),
        ("test_failure_formatsMessage", test_failure_formatsMessage),
        ("test_success_notFail", test_success_notFail),
    ]
}

extension ExpectationCompleteTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExpectationCompleteTests = [
        ("test_complete_it_failsIfNoCompleteEvents", test_complete_it_failsIfNoCompleteEvents),
        ("test_complete_it_handlesNegation", test_complete_it_handlesNegation),
        ("test_complete_it_succeedsIfCompleted", test_complete_it_succeedsIfCompleted),
        ("test_completeAfter_it_failsIfCompletedAfterDifferentCount", test_completeAfter_it_failsIfCompletedAfterDifferentCount),
        ("test_completeAfter_it_failsIfNotComplete", test_completeAfter_it_failsIfNotComplete),
        ("test_completeAfter_it_handlesNegation", test_completeAfter_it_handlesNegation),
        ("test_completeAfter_it_succeedsIfCompletedAfterGivenCount", test_completeAfter_it_succeedsIfCompletedAfterGivenCount),
        ("test_completeAt_it_failsIfCompletedAtDifferentTime", test_completeAt_it_failsIfCompletedAtDifferentTime),
        ("test_completeAt_it_failsIfNoCompleteEvents", test_completeAt_it_failsIfNoCompleteEvents),
        ("test_completeAt_it_handlesNegationAtSpecificTime", test_completeAt_it_handlesNegationAtSpecificTime),
        ("test_completeAt_it_succeedsIfCompletedAtSpecificTime", test_completeAt_it_succeedsIfCompletedAtSpecificTime),
    ]
}

extension ExpectationErrorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExpectationErrorTests = [
        ("test_error_it_failsIfNoErrorEvents", test_error_it_failsIfNoErrorEvents),
        ("test_error_it_handlesNegation", test_error_it_handlesNegation),
        ("test_error_it_succeedsIfErrored", test_error_it_succeedsIfErrored),
        ("test_errorAt_it_failsIfErroredAtDifferentTime", test_errorAt_it_failsIfErroredAtDifferentTime),
        ("test_errorAt_it_failsIfNoErrorEvents", test_errorAt_it_failsIfNoErrorEvents),
        ("test_errorAt_it_handlesNegation", test_errorAt_it_handlesNegation),
        ("test_errorAt_it_succeedsIfErroredAtSpecificTime", test_errorAt_it_succeedsIfErroredAtSpecificTime),
        ("test_errorWith_it_failsIfDifferentError", test_errorWith_it_failsIfDifferentError),
        ("test_errorWith_it_failsIfNoErrorEvents", test_errorWith_it_failsIfNoErrorEvents),
        ("test_errorWith_it_handlesNegation", test_errorWith_it_handlesNegation),
        ("test_errorWith_it_succeedsIfErrorWithMatch", test_errorWith_it_succeedsIfErrorWithMatch),
        ("test_errorWithAt_it_failsIfDifferentError", test_errorWithAt_it_failsIfDifferentError),
        ("test_errorWithAt_it_failsIfDifferentTime", test_errorWithAt_it_failsIfDifferentTime),
        ("test_errorWithAt_it_failsIfNoErrorEvents", test_errorWithAt_it_failsIfNoErrorEvents),
        ("test_errorWithAt_it_handlesNegation", test_errorWithAt_it_handlesNegation),
        ("test_errorWithAt_it_succeedsIfErrorWithMatch", test_errorWithAt_it_succeedsIfErrorWithMatch),
    ]
}

extension ExpectationNextTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExpectationNextTests = [
        ("test_next_it_failsIfHavingMultipleEvents", test_next_it_failsIfHavingMultipleEvents),
        ("test_next_it_failsIfNoNextEvents", test_next_it_failsIfNoNextEvents),
        ("test_next_it_failsIfNotMatchingAll", test_next_it_failsIfNotMatchingAll),
        ("test_next_it_failsIfNotMatchingAny", test_next_it_failsIfNotMatchingAny),
        ("test_next_it_failsIfNotMatchingAnyFromSingleValue", test_next_it_failsIfNotMatchingAnyFromSingleValue),
        ("test_next_it_failsIfNotMatchingAtSameTime", test_next_it_failsIfNotMatchingAtSameTime),
        ("test_next_it_handlesNegation", test_next_it_handlesNegation),
        ("test_next_it_handlesNegationForAllMatcher", test_next_it_handlesNegationForAllMatcher),
        ("test_next_it_handlesNegationForAnyMatcher", test_next_it_handlesNegationForAnyMatcher),
        ("test_next_it_succeedsIfMatchingAll", test_next_it_succeedsIfMatchingAll),
        ("test_next_it_succeedsIfMatchingAny", test_next_it_succeedsIfMatchingAny),
        ("test_next_it_succeedsIfMatchingAtSameTime", test_next_it_succeedsIfMatchingAtSameTime),
    ]
}

extension ExpectationTimelineTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExpectationTimelineTests = [
        ("test_beJust_it_handlesFailures", test_beJust_it_handlesFailures),
        ("test_beJust_it_handlesNegation", test_beJust_it_handlesNegation),
        ("test_beJust_it_succeedsWhenMatchJust", test_beJust_it_succeedsWhenMatchJust),
        ("test_empty_it_failsWhenErrorEventReceived", test_empty_it_failsWhenErrorEventReceived),
        ("test_empty_it_failsWhenNextEventsReceived", test_empty_it_failsWhenNextEventsReceived),
        ("test_empty_it_failsWhenNoEventsReceived", test_empty_it_failsWhenNoEventsReceived),
        ("test_empty_it_handlesNegation", test_empty_it_handlesNegation),
        ("test_empty_it_suceedsWhenMatchEmpty", test_empty_it_suceedsWhenMatchEmpty),
        ("test_macthTimeline_when_matched_it_negates", test_macthTimeline_when_matched_it_negates),
        ("test_macthTimeline_when_matched_it_suceeds", test_macthTimeline_when_matched_it_suceeds),
        ("test_matchTimeline_when_different_it_fails", test_matchTimeline_when_different_it_fails),
        ("test_never_it_failsWhenEventsRecieved", test_never_it_failsWhenEventsRecieved),
        ("test_never_it_handlesNegation", test_never_it_handlesNegation),
        ("test_never_it_succeedWhenMatchNever", test_never_it_succeedWhenMatchNever),
        ("test_startWith_it_handlesFailuresWhenStartedWithDifferentValue", test_startWith_it_handlesFailuresWhenStartedWithDifferentValue),
        ("test_startWith_it_handlesFailuresWhenStartedWithNoValue", test_startWith_it_handlesFailuresWhenStartedWithNoValue),
        ("test_startWith_it_handlesNegation", test_startWith_it_handlesNegation),
        ("test_startWith_it_succeedsWhenMatchStartWith", test_startWith_it_succeedsWhenMatchStartWith),
    ]
}

extension NextAssertionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NextAssertionTests = [
        ("testNextEventsHelpers", testNextEventsHelpers),
        ("testNotSentNext", testNotSentNext),
        ("testSentNextEvent", testSentNextEvent),
    ]
}

extension OperatorAssertionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OperatorAssertionTests = [
        ("testEmpty", testEmpty),
        ("testJust", testJust),
        ("testMatchFirstNext", testMatchFirstNext),
        ("testMatchFirstNextBehaviorRelay", testMatchFirstNextBehaviorRelay),
        ("testMatchFirstNextPublishRelay", testMatchFirstNextPublishRelay),
        ("testNever", testNever),
        ("testNeverPublishRelay", testNeverPublishRelay),
    ]
}

extension TestSchedulerExtTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TestSchedulerExtTests = [
        ("testRecordingAllEvents", testRecordingAllEvents),
        ("testRecordingAllEventsBehaviorRelay", testRecordingAllEventsBehaviorRelay),
        ("testRecordingAllEventsPublishRelay", testRecordingAllEventsPublishRelay),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(CompleteAssertionTests.__allTests__CompleteAssertionTests),
        testCase(ErrorAssertionTests.__allTests__ErrorAssertionTests),
        testCase(EvaluationNegatedTests.__allTests__EvaluationNegatedTests),
        testCase(EvaluationTests.__allTests__EvaluationTests),
        testCase(ExpectationCompleteTests.__allTests__ExpectationCompleteTests),
        testCase(ExpectationErrorTests.__allTests__ExpectationErrorTests),
        testCase(ExpectationNextTests.__allTests__ExpectationNextTests),
        testCase(ExpectationTimelineTests.__allTests__ExpectationTimelineTests),
        testCase(NextAssertionTests.__allTests__NextAssertionTests),
        testCase(OperatorAssertionTests.__allTests__OperatorAssertionTests),
        testCase(TestSchedulerExtTests.__allTests__TestSchedulerExtTests),
    ]
}
#endif
